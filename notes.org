http://docs.sequelizejs.com/en/v3/



CREATE TABLE users    (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
name VARCHAR(50), 
imagePath VARCHAR(50), 
email VARCHAR(256), 
password CHAR(128));

CREATE TABLE projects (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
name VARCHAR(50), 
userId INT NOT NULL,
CONSTRAINT FOREIGN KEY (userId) REFERENCES users (id));

CREATE TABLE stages   (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
name VARCHAR(50), 
projectId INT NOT NULL,
CONSTRAINT FOREIGN KEY (projectId) REFERENCES projects (id));

CREATE TABLE issues   (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
name VARCHAR(50), 
description TEXT, 
dueDate DATETIME, 
startTime DATETIME, 
endTime DATETIME, 
priority TINYINT,
stageId INT NOT NULL,
CONSTRAINT FOREIGN KEY (stageId) REFERENCES stages (id));

* Trello css
** Surface (app-wrapper)
*** Content (app-inner)
**** Board Wrapper (kanban-board-wrapper)
     position: absolute;
     left: 0;
     right: 0;
     top: 0;
     bottom: 0;
***** Board Main Content (kanban-board-inner)
      height: 100%;
      display: -webkit-box;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex;
      -webkit-flex-direction: column;
      -ms-flex-direction: column;
      flex-direction: column;
      margin-right: 0;
      -webkit-transition: margin .1s ease-in;
      transition: margin .1s ease-in;
****** Board Canvas (kanban-board-canvas)
       position: relative;
       -webkit-box-flex: 1;
       -webkit-flex-grow: 1;
       -ms-flex-positive: 1;
       flex-grow: 1;
******* board (kanban-board)
        -ms-user-select: none;
        user-select: none;
        white-space: nowrap;
        margin-bottom: 10px;
        overflow-x: auto;
        overflow-y: hidden;
        padding-bottom: 10px;
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
******** list wrapper (kanban-list-wrapper)
         width: 270px;
         margin: 0 5px;
         height: 100%;
         -moz-box-sizing: border-box;
         box-sizing: border-box;
         display: inline-block;
         vertical-align: top;
         white-space: nowrap;
********* list
          background: #E2E4E6;
          border-radius: 3px;
          box-sizing: border-box;
          display: -webkit-box;
          display: -webkit-flex;
          display: -ms-flexbox;
          display: flex;
          -webkit-flex-direction: column;
          -ms-flex-direction: column;
          flex-direction: column;
          max-height: 100%;
          position: relative;
          white-space: normal;



* Helpful Links

  http://bulletjournal.com/

* Restarino

  | URI                            | Method | Collection       | Operation | Function          |
  |--------------------------------+--------+------------------+-----------+-------------------|
  | /user/new                      | POST   | users            | create    | createUser        |
  | /user/{userId}                 | GET    | users            | retrieve  | getUser           |
  | /user/{userId}/profile         | GET    | users            | retrieve  | getUserProfile    |
  | /user/{userId}/profile         | POST   | users            | update    | updateUserProfile |
  | /{userId}/projects             | GET    | projects         | retrieve  | getProjects       |
  | /{userId}/projects             | POST   | projects, stages | create    | addProject        |
  | /{userId}/projects/{projectId} | POST   | projects, stages | update    | editProject       |
  | /{userId}/projects/{projectId} | DELETE | projects, stages | delete    | deleteProject     |
  | /{userId}/project              | GET    | projects, stages | retrieve  | getProject        |
  | /{userId}/issues               | GET    | issues           | retrieve  | getIssues         |
  | /{userId}/issues/add           | GET    | issues           | create    | addIssue          |
  | /{userId}/issues/{issueId}     | POST   | issues           | update    | editIssue         |
  | /{userId}/issues/{issueId}     | DELETE | issues           | delete    | deleteIssue       |


* Integrations

** Github

   Issues can be tied to github issues. Application will support:
   1. Creating a new issue
   2. importing an existing issue
   3. closing an issue

** Google Calendar

   Issues can also be tied to Google Calendar. Application will support:
   1. Dsiplay tasks on google calendar

* Components

** Project

   A project is a wrapper for a set of tasks. A project contains:
   1. A set of stages for the project
   2. The issues in the project, tied to a given stage

*** View-specific functionality

**** Kanban View

     Each project will have its own kanban board. These boards do not support multiple views.

**** Todo View

     Each project will have its own Todo list. Multiple projects can be viewed at once

**** Calendar View

     Each project will have its own Calendar. Multiple projects can be viewed at once

** Stage

   Stages are more nebulous than projects. They is not necessarily apparent in every view, but will be tied to every project nonetheless. 

   All issues must be given a stage. One stage will be set as the default, allowing users to not have to worry about chosing a stage at issue inception.

   Stages can be anything from {todo, doing, done} to {math class, physics class, english class} and anywhere in between. They are meant to be flexible enough to fit different task management strategies.

*** Stage state

**** A Name (required)

     Just a name for the stage

**** A list of issues in the stage

     May not actually be tied to the stage itself.

**** A priority level (optional)

     Optional priority level for stages can be set. This priority level is identical to the issue's priority level.

*** Templates

    The application will provide templates for stages. v1.0 will include:
    1. Kanban Template
       - Todo
       - Doing
       - Done
    2. School Template
       - Class 1
       - Class 2
       - Class 3
    3. Office Template
       - Current Tasks
       - Correspondence
       - Long term projects
       - On Hold/Awaiting Reply

**** Custom Stages

     Users can also create their own stages, and will be prompted for the name for each stage

*** View-specific functionality

**** Kanban View

     In kanban view, stages represent the lists, or columns, of the board. 

     The traditional kanban view uses different levels of completion for each stage, but stages can be adjusted to any categorization.

     Order of the stages can be set either manually or by dragging columns

**** Todo View

     Stages should be displayed in the todo list, given screen sizes (shouldn't be a problem)

     If given a priority level, issues in a stage with higher priority will be placed at the top.

     If one project is being viewed, different stages will have different colors. If multiple calendars are being viewed, the calendars will each be monochromatic, and stages will be essentially invisible.

**** Calendar View

     Stages will be visible in single-project calendar view only. 

     If one project is being viewed, different stages will have different colors. If multiple calendars are being viewed, the calendars will each be monochromatic, and stages will be essentially invisible.

** Issue

   Issues are the smallest component. Issues can take on one of two forms: task or event. See due date for more.

*** Issue state

**** Title for issue

     Title should be a short description of the project. Long limits are better.

**** Stage of the issue 

     Stages in the project will be displayed. The project will have a default stage, which will be auto-selected.

**** Description

     Description of the projects can have a wywiwyg editor in them.

**** Due Date

     Due date determines whether the issue is a task or event. Issues default to task, and will only be considered an event if the due date is of the "From x to y" variety.

     Issues can be assigned for:
     1) A due day
     2) A due day and time
     3) A due time period (from x to y)
     4) No due date

**** Priority level 

     Priority level can be set to one of three levels:
     1. now
     2. soon
     3. later

*** View-specific functionality

**** Kanban View

     In kanban view, issues are the individual cards.

     In kanban view, issues will display title, due date, priority level, and integrations

***** Stage

      Stage can be set manually or by dragging issue to the appropriate list.

***** Priority

      Priority within the current stage can be set manually or by dragging issue up the list.

**** Todo View

***** Priority

      Priority can be set manually or by dragging issue up the list.

**** Calendar View

     Issues will be placed on their due date in the calendar

* Views

** Users

   - Login screen
   - Create account screen
   - Forgot password screen
   - Account dashboard
     - View all projects
     - add project screen

** Navigation

   - header
   - Side bar to calendar and todo list will share a project navigation style.

** Calendar

   See issues organized by due date on a calendar. 

   - Calendar view can support any number of projects' issues at a time
   - If one project is being viewed, color different stages differently
   - If >1 project is being viewed, color different calendars differently
   - Items without a due date will not be displayed. 

     Calendar will have: 
     1. Month view showing five weeks
     2. week view
     3. day view
     4. "schedule" view showing an inifinitely scrollable list of days

     Calendar will also have a similar project navigation to the todo list view

*** Invisible items

    1. Priority
    2. description
    3. stage (if in multiple-project view)

** Kanban

   See issues categorized by stage in a kanban board

   - Kanban boards are only able to view one project at a time

*** Invisible items

    1. Description
    2. Event issues

** Todo

   See issues organized by priority on a list. Stage priority takes precedence, then issues priority.

   - Todo view can support any number of projects' issues at a time
   - issues without priority set will be placed at bottom
   - Stage will be displayed on the item as well, given screen size

     Todo view will also share a project navigation pane with calendar.

*** Invisible items

    1. Stage
    2. Event issues


* React components
  1. Issue
  2. List of issues
     - By project
     - By stage
     - By due date
  3. Todo
     - List of issues by project
  4. Day of issues
     - List of issues by due date
  5. Week of issues
     - Just 7 days side by side
  6. Month of issues
     - Potentially just days
  7. Schedule view
     - Just day view over and over again
  8. Kanban view
     - List of issues by stage

* Database design
** Table: Users
   - id
   - name
   - email
   - password
   - project list id
   - issue list id
** Table: Projects
   - id
   - user id
   - stages (list)


